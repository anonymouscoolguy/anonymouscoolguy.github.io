<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://anonymouscoolguy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://anonymouscoolguy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-21T15:05:43+00:00</updated><id>https://anonymouscoolguy.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple personal website to post about interesting stuff. </subtitle><entry><title type="html">Introductory Abstract Data Types and Data Structures</title><link href="https://anonymouscoolguy.github.io/blog/2024/ads-and-ds/" rel="alternate" type="text/html" title="Introductory Abstract Data Types and Data Structures"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://anonymouscoolguy.github.io/blog/2024/ads-and-ds</id><content type="html" xml:base="https://anonymouscoolguy.github.io/blog/2024/ads-and-ds/"><![CDATA[<h1 id="abstract-data-types">Abstract Data Types</h1> <p>An abstract data type is an abstraction of a data structure that provides only the interface to which the data structure must adhere. The interface does not give any specific details about how something should be implemented or in what programming language (Javatpoint). Consider the following ADTs:</p> <h2 id="static-list">Static List</h2> <p>Must support the following methods:</p> <ul> <li><code class="language-plaintext highlighter-rouge">build(A)</code>: Make new data structure</li> <li><code class="language-plaintext highlighter-rouge">len()</code>: Length of list</li> <li><code class="language-plaintext highlighter-rouge">iter_seq()</code>: Output values in sequence order</li> <li><code class="language-plaintext highlighter-rouge">get_at(i)</code>: Return value at index <code class="language-plaintext highlighter-rouge">i</code></li> <li><code class="language-plaintext highlighter-rouge">set_at(i, x)</code>: Set <code class="language-plaintext highlighter-rouge">x</code> to index <code class="language-plaintext highlighter-rouge">i</code></li> </ul> <h2 id="dynamic-list">Dynamic List</h2> <p>The same as the static list, plus:</p> <ul> <li><code class="language-plaintext highlighter-rouge">insert_at(i, x)</code></li> <li><code class="language-plaintext highlighter-rouge">delete_at(i)</code></li> </ul> <h2 id="stack">Stack</h2> <p>A stack is First-In-First-Out, and has the following methods:</p> <ul> <li><code class="language-plaintext highlighter-rouge">push(x)</code></li> <li><code class="language-plaintext highlighter-rouge">pop()</code></li> <li><code class="language-plaintext highlighter-rouge">peek()</code></li> <li><code class="language-plaintext highlighter-rouge">isEmpty()</code></li> <li><code class="language-plaintext highlighter-rouge">size()</code></li> </ul> <h2 id="queue">Queue</h2> <p>A queue is Last-In-Last-Out, and has the following methods:</p> <ul> <li><code class="language-plaintext highlighter-rouge">enqueue(x)</code></li> <li><code class="language-plaintext highlighter-rouge">dequeue()</code></li> <li><code class="language-plaintext highlighter-rouge">peek()</code></li> <li><code class="language-plaintext highlighter-rouge">size()</code></li> <li><code class="language-plaintext highlighter-rouge">isEmpty()</code></li> </ul> <h2 id="set">Set</h2> <ul> <li><code class="language-plaintext highlighter-rouge">build(A)</code></li> <li><code class="language-plaintext highlighter-rouge">contains(x)</code> / <code class="language-plaintext highlighter-rouge">find(x)</code></li> <li><code class="language-plaintext highlighter-rouge">insert(x)</code></li> <li><code class="language-plaintext highlighter-rouge">delete(x)</code></li> <li><code class="language-plaintext highlighter-rouge">find_min(x)</code></li> <li><code class="language-plaintext highlighter-rouge">find_max(x)</code></li> <li><code class="language-plaintext highlighter-rouge">find_prev(k)</code>: Previous biggest value before <code class="language-plaintext highlighter-rouge">k</code></li> <li><code class="language-plaintext highlighter-rouge">find_next(k)</code>: Next biggest value after <code class="language-plaintext highlighter-rouge">k</code></li> </ul> <h1 id="data-structures">Data Structures</h1> <p>Data structures are the actual implementation of the interface provided the ADT.</p> <h2 id="array-based-list">Array-based List</h2> <p>This is an implementation of the <em>static list</em> ADT. An array-based list is represented as a consectutive chunck of memory and can be accessed by <code class="language-plaintext highlighter-rouge">memory[address(array) + i]</code>, which makes accessing an array constant. Just building and outputting is array is done in <code class="language-plaintext highlighter-rouge">O(n)</code>.</p> <h2 id="linked-list">Linked List</h2> <p>This is an implementation of the <em>dynamic list</em> ADT. Each value will be stored as a node and will point to the next value. Insertion and deletion take <code class="language-plaintext highlighter-rouge">O(i)</code> time, which in the worst case is <code class="language-plaintext highlighter-rouge">O(n)</code>.</p> <h2 id="dynamic-array">Dynamic Array</h2> <p>This is an array-based implementation of the <em>dynamic list</em> ADT. In this DS the constraint of the length of the array is relaxed, for example, instead of making an array of size <code class="language-plaintext highlighter-rouge">n</code> it makes one of <code class="language-plaintext highlighter-rouge">n * k</code>. And whenever the length equals size, the array is resized/reallocated. Resizing takes linear time but everything else is done in constant time.</p> <h1 id="practice">Practice</h1> <h2 id="lets-create-a-linked-list-data-structure">Let’s create a linked list data structure</h2> <p>Let’s begin by creating an interface, <code class="language-plaintext highlighter-rouge">List</code>, that lists the methods our linked list must implement. This will be a direct representation of the dynamic list ADT (the method names must not be exactly the same).</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">);</span>

    <span class="kt">boolean</span> <span class="nf">find</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">printList</span><span class="o">();</span>

    <span class="kt">int</span> <span class="nf">size</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div> <p>Next, let’s create a <code class="language-plaintext highlighter-rouge">Node</code> class in order to store both the data and a next pointer.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">E</span> <span class="n">data</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>

    <span class="nc">Node</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Then, we will create our <code class="language-plaintext highlighter-rouge">LinkedList</code> class with a constructor and a <code class="language-plaintext highlighter-rouge">head</code> variable.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    
    <span class="kd">private</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">head</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LinkedList</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">head</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div> <p>Now, let’s continue by building each of the necessary methods, starting with <code class="language-plaintext highlighter-rouge">add(x)</code>:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;(</span><span class="n">data</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">find(x)</code>:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">find</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">data</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">remove(x)</code>:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="no">E</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">data</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">data</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">printList()</code>:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">printList</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">size()</code>:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">size</span><span class="o">++;</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="very-cool-introductory-problem">Very cool introductory problem</h2> <p>Consider the following problem statement:</p> <blockquote> <p>Write an algorithm to check if an expression containing different types of brackets (parentheses () , square brackets [] , and curly braces {} ) is balanced. In a balanced expression, every opening bracket (including ( , [ , { ) is matched with its closing counterpart (respectively ), ], } ) in the correct order.</p> </blockquote> <p>This problem is very tedious if one does not find the <em>right</em> idea. The idea is always when a opening bracket is encountered to add the closing bracket to a stack. Then always when a closing bracket is found it must match the next bracket in the stack. Also if the stack is not empty at the end, it is also unbalanced.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isBalanced</span><span class="o">(</span><span class="nc">String</span> <span class="n">expression</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;();</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">expression</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="sc">'{'</span><span class="o">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">'}'</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">'['</span><span class="o">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">']'</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="sc">'('</span><span class="o">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">')'</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'}'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">']'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">())</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>

    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="DSA"/><category term="ds"/><summary type="html"><![CDATA[A brief introduction to Abstract Data Types and some Data Structures]]></summary></entry><entry><title type="html">Dictionaries, hash tables and algorithmic analysis</title><link href="https://anonymouscoolguy.github.io/blog/2024/dictionaries-and-algorithmic-analysis/" rel="alternate" type="text/html" title="Dictionaries, hash tables and algorithmic analysis"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://anonymouscoolguy.github.io/blog/2024/dictionaries-and-algorithmic-analysis</id><content type="html" xml:base="https://anonymouscoolguy.github.io/blog/2024/dictionaries-and-algorithmic-analysis/"><![CDATA[<h1 id="dictionary">Dictionary</h1> <p>A dictionary is an ADT that models a collection which stores key-value pairs. The following should be present:</p> <ul> <li><code class="language-plaintext highlighter-rouge">put(key, value)</code></li> <li><code class="language-plaintext highlighter-rouge">get(key)</code></li> </ul> <h2 id="hash-table">Hash Table</h2> <p>A hash table is an implementation of the dictionary ADT. It uses a hash function to convert key to index values to then be stored in an array. This makes accessing a hashmap seemingly constant, but in theory it is <code class="language-plaintext highlighter-rouge">O(n)</code>, because there might be collisions with indices, since mostly a hash function maps a space of input values to a <strong>smaller</strong> space of output values. Some collision techniques include:</p> <ul> <li>Linear probing: Tries to find the next available slot in the data collection</li> <li>Seperate chaining: Each index in the array points to a linked list</li> <li>Double hashing: Use a second hash function when collision is encountered</li> </ul> <p>This then naturally makes insertion and searching in theory <code class="language-plaintext highlighter-rouge">O(n)</code>, but in practice it is much faster.</p> <h1 id="algorithmic-analysis">Algorithmic Analysis</h1> <p>The efficiency of algortihms is measured in the number of operations rather than in the amount of time. The performance is expected to depend on the size of in the input, and drescribed with the following functions:</p> <ul> <li>\(O(1)\).</li> <li>\(O(\log{n})\).</li> <li>\(O(n)\).</li> <li>\(O(n\log{n})\).</li> <li>\(O(n^c)\).</li> <li>\(O(2^n)\).</li> </ul> <p>Some good rules take take into consideration, include:</p> <ul> <li>Different steps get added</li> <li>Drop constants</li> <li>Different inputs maps to different variables</li> <li>Drop non-dominate terms</li> </ul> <h1 id="practice">Practice</h1> <h2 id="duplicates">Duplicates</h2> <blockquote> <p>Describe an algorithm that checks if an array of integers contains at least <code class="language-plaintext highlighter-rouge">k</code> duplicates of any element. The method should have a time complexity of <code class="language-plaintext highlighter-rouge">O(n²)</code> and a storage complexity of <code class="language-plaintext highlighter-rouge">O(1)</code>.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">containsKDuplicates</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">])</span>
                <span class="n">count</span><span class="o">++;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>Now, try to improve a time complexity to <code class="language-plaintext highlighter-rouge">O(n)</code>, but the space complexity can also be <code class="language-plaintext highlighter-rouge">O(n)</code>.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">containsKDuplicatesImproved</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;();</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span>
            <span class="n">count</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">1</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="lets-implement-a-dictionary">Let’s implement a dictionary</h2> <p>Let’s create a hashmap by implementing the dictionary ADT.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Dictionary</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">);</span>

    <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <p>Let’s also define a entry as a data structure:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">key</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>

    <span class="nc">Entry</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Now, let’s create our hashmap:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMap</span> <span class="kd">implements</span> <span class="nc">Dictionary</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Entry</span><span class="o">[]</span> <span class="n">table</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Entry</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
    <span class="o">}</span>  

<span class="o">}</span>
</code></pre></div></div> <p>Firstly, let’s begin by creating a custom hash function, that given a key outputs the index where the data should be place:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">hashValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">key</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">hashValue</span> <span class="o">+=</span> <span class="n">key</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">):</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">hashValue</span> <span class="o">%</span> <span class="n">capacity</span><span class="o">;</span>

    <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <p>Something as simple as summing the values of the characters is enough to do the trick. Next, let’s implement the <code class="language-plaintext highlighter-rouge">put()</code> and <code class="language-plaintext highlighter-rouge">get()</code> methods.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">table</span><span class="o">[</span><span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Entry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">table</span><span class="o">[</span><span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)];</span>
<span class="o">}</span>
</code></pre></div></div> <p>You might already be seeing a problem with this implementation. What happens if when hashing the key we override something that has already been placed? And you right, this implementation is imcomplete, it does not have collision handling. You might want to add it to the implementation, but unfortunately I currently do now have much time :D, so I will let this for you.</p>]]></content><author><name></name></author><category term="DSA"/><category term="ds"/><summary type="html"><![CDATA[Quick dive into dictionaries, their implementation and algorithmic analysis]]></summary></entry><entry><title type="html">Running</title><link href="https://anonymouscoolguy.github.io/blog/2024/running-goal/" rel="alternate" type="text/html" title="Running"/><published>2024-03-18T00:00:00+00:00</published><updated>2024-03-18T00:00:00+00:00</updated><id>https://anonymouscoolguy.github.io/blog/2024/running-goal</id><content type="html" xml:base="https://anonymouscoolguy.github.io/blog/2024/running-goal/"><![CDATA[<p>This is not a conventional post. I will try to use this post as a <em>sort of</em> habit checker for my running. In an attempt to increase my stamina, I will try to go running everyday (preferably in the morning). I could do the habit tracking in an offline environment, but I believe that putting this online (even knowing that noboby is going to see this) gives me more motivation to continue.</p> <p>Progress: ✅</p>]]></content><author><name></name></author><category term="misc"/><category term="running"/><summary type="html"><![CDATA[My online running habit tracker]]></summary></entry></feed>